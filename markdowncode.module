<?php

/**
 * @file
 * Provides a Markdown-Github code blocks input filter.
 */

/**
 * Implements hook_filter_info().
 */
function markdowncode_filter_info() {
	$filters = array(
		'filter_markdowncode' => array(
			'title' => t('Github-style Markdown code blocks'),
			'description' => t('Allows using Gihub style fenced code blocks with language name.'),
			'process callback' => '_filter_markdowncode_process',
			'tips callback'	=> '_filter_markdowncode_tips',
		)
	);

	return $filters;
}

/**
 * Returns the markdown input filter tips.
 */
function _filter_markdowncode_tips($format, $long = FALSE) {
	if ($long) {
		$example = '
```css
.some-class {
	background: yellow;
}
```
		';
		$exampleRender = htmlspecialchars(_filter_markdowncode_process($example, null, null));
		return t('You can use fenced code blocks used in Github-style Markdown. 
			<p>Example:
			<pre>@example</pre>
			<p>Is transformed to:
			<pre>@example_render</pre>
			<p>As you can see the filter itself will NOT enable syntax highlighting, 
			but e.g. Geshi filter will pick up the `pre` tag and transform it further.
			',
			array('@example' => $example, '@example_render' => $exampleRender)
		);
	}
	else {
		return t('You can use ```css[...some code...]``` as fenced code blocks. 
			You MUST provide language name or it will not work as expected.');
	}
}

/**
 * Filter process callback.
 */
function _filter_markdowncode_process($text, $filter, $format) {
	if (!empty($text)) {
		$text = preg_replace('#```([a-z]\S+)([\s\S]+?)```#', '<pre language="$1">$2</pre>', $text);
	}

	return $text;
}